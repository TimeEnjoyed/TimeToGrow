===================================================================
BASIC EXAMPLE
- USER BUYS SEEDS WITH POINTS (50pts) (twitchapi <-websocket-> twitchio)
- (twitchio <-built into each other-> starlette server)
- Creates user in table in database. (sqlite - asynchronous via wrapper https://github.com/Rapptz/asqlite)
- Questions: attributes of user?
- Grab seeds.jpg and display on template.

===================================================================
Three parts
1) This should work from command line- Growth Plant Program (state)
2) The Server Problem - connect user to program
twitchAPI - connects to events such as: redemption points, follows, subs
3) How to display via HTML
 -prob need js

starlette receives the request into a function.
def receive_redemption(?)
    # create user in database
    # returns user object

Process/thinking aloud:
- redeem event --> request ( username, type of redemption) POST.

- Server Side Event
User on Twitch Redeems > TwitchIO Recieves Redemption >
TwitchIO does whatever you want with API and puts data into queue >
 Starlette receives data from queue >
 Starlette sends an event to all subscribed listeners

===============================

TODO:
[]

# TO GET THE CYCLE
[] - minute = start adding this to cycle when first plant is made.
[] - logic for "cycle" (int, 1-12)
        - type: int
        - for minute in twelve_minutes:
            cycle += minute




State += 1 if:
- water = True
- wilt = False
- cycle = 1
- sabotage = False

State -1 if:
- sabotage = True


SABOTAGE (redemption):
- anyone can sabotage
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

PLANT+WATER SEED (redemption):
- anyone can plant seed
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

WATER (command):
- non-follower: bot passes
- follower: bot sends info to water()

WILT
- if someone doesn't water when 6 min < cycle < 12min:
- state for plant: -1? ??
- shows yellow version of plant?

LOGIC in BACK:
- database
- { places:
    {'place: 1, {'username': 'timeenjoyed', 'state': 3, 'wilt': false}},
    {'place: 2, {'username': 'ambivalentbunnie', 'state': 2, 'wilt': true }},
    {'place: 3, {'username': 'mystypy', 'state': 2, 'wilt': true}},
    {'place: 4, {'username': 'kroden', 'state': 2, 'wilt': true }},
    }

<script>

cont event = new EventSource("") = > json data

def event

</script>

<html>
<div id=1, style="bottom: 25px'>
    <src img="seed.jpg">
</div>
</html>



async def get_step(username):
    - "check to see if username exists"

    def check_wilt(time)
    - "check to see if wilt"
    - get time
    - generate the state
    return state

async def dispatch

========== new approach ==========
    Once someone plants a seed, a 6-minute routine begins.
        > guaranteed ping to the front
            - grow
            - dies


    And a 1-minute by minute routine begins.
        > pings when:
            - born
            - water
            - sabotage

json example:
{ 'ground':
    {
        'username': username,  # '' or 'timenejoyed'
        '
    }






