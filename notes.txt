===================================================================
BASIC EXAMPLE
- USER BUYS SEEDS WITH POINTS (50pts) (twitchapi <-websocket-> twitchio)
- (twitchio <-built into each other-> starlette server)
- Creates user in table in database. (sqlite - asynchronous via wrapper https://github.com/Rapptz/asqlite)
- Questions: attributes of user?
- Grab seeds.jpg and display on template.

===================================================================
Three parts
1) This should work from command line- Growth Plant Program (state)
2) The Server Problem - connect user to program
twitchAPI - connects to events such as: redemption points, follows, subs
3) How to display via HTML
 -prob need js

starlette receives the request into a function.
def receive_redemption(?)
    # create user in database
    # returns user object

Process/thinking aloud:
- redeem event --> request ( username, type of redemption) POST.

- Server Side Event
User on Twitch Redeems > TwitchIO Recieves Redemption >
TwitchIO does whatever you want with API and puts data into queue >
 Starlette receives data from queue >
 Starlette sends an event to all subscribed listeners

===============================

TODO:
[timeenjoyed] - finish database
CREATE TABLE IF NOT EXISTS plants (
    rowid INTEGER PRIMARY KEY,
    username TEXT,
    cycle INT,
    water BOOLEAN,
    sabotage BOOLEAN,
    growth_cycles INT
);
growth_cycles: int = 1 - 8
    1 - mound
    2 - sprout
    3 - seedling
    4 - 2 leaves
    5 - higher
    6 - little bud
    7 - starting to bloom
    8 - full bloom



# TO GET THE CYCLE
[timeenjoyed]
    - twitchio.routines (sends to frontend every 6 mins)
    - automatic
  [bunnie]  - cycle: int = 1 2 3 4
            1 grow
            2 water 1) water= True > 1; 2) water=False -> 3
            3 waits for water. 1) water = True > 2; 2) water= False -> 4
            4 death

     - if someone waters their plant first, and then it gets sabotaged = nothing happens
      - if someone sabotages first, then waters it = -1 cycle

[] - twitchio.routines (sends to frontend every 1 min)
      - triggered


[bunnie] - function that responds to water-text command

[timeenjoyed] - sabotage - functions that responds



SABOTAGE (redemption):
- anyone can sabotage
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

PLANT+WATER SEED (redemption):
- anyone can plant seed
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

WATER (command):
- non-follower: bot passes
- follower: bot sends info to water()

WILT
- if someone doesn't water when 6 min < cycle < 12min:
- state for plant: -1? ??
- shows yellow version of plant?

LOGIC in BACK:
user: str = 'timeenjoyed'
rowid: int = 1  # 1-25
water: bool = True
cycle: int =  1 # 1-4
sabotage: bool = True
growth_cycles: int = 1 - 8
- database
[
    {
        "rowid": 1,
        "username": "John",
        "water": 25,
        "cycle": null,
        "sabotage": True,
        growth_cycles = 1
    },
    {
        "rowid": 2,
        "username": "John",
        "water": 25,
        "cycle": null,
        "sabotage": True,
        growth_cycles = 1
    },
    {
        "rowid": 3,
        "username": "John",
        "water": 25,
        "cycle": null,
        "sabotage": True,
        growth_cycles = 1
    },...

]


<script>

cont event = new EventSource("") = > json data

def event

</script>

<html>
<div id=1, style="bottom: 25px'>
    <src img="seed.jpg">
</div>
</html>



async def get_step(username):
    - "check to see if username exists"

    def check_wilt(time)
    - "check to see if wilt"
    - get time
    - generate the state
    return state

async def dispatch

========== new approach ==========
    Once someone plants a seed, a 6-minute routine begins.
        > guaranteed ping to the front
            - grow
            - dies


    And a 1-minute by minute routine begins.
        > pings when:
            - born
            - water
            - sabotage

json example:
{ 'ground':
    {
        'username': username,  # '' or 'timenejoyed'
        '
    }






