===================================================================
BASIC EXAMPLE
- USER BUYS SEEDS WITH POINTS (50pts) (twitchapi <-websocket-> twitchio)
- (twitchio <-built into each other-> starlette server)
- Creates user in table in database. (sqlite - asynchronous via wrapper https://github.com/Rapptz/asqlite)
- Questions: attributes of user?
- Grab seeds.jpg and display on template.



===================================================================
Three parts
1) This should work from command line- Growth Plant Program (state)

2) The Server Problem - connect user to program
twitchAPI - connects to events such as: redemption points, follows, subs

3) How to display via HTML
 -prob need js y/n


starlette receives the request into a function.
def receive_redemption(?)
    # create user in database
    # returns user object

Process/thinking aloud:
- redeem event --> request ( username, type of redemption) POST.


- Server Side Event



User on Twitch Redeems > TwitchIO Recieves Redemption >
TwitchIO does whatever you want with API and puts data into queue >
 Starlette receives data from queue >
 Starlette sends an event to all subscribed listeners

===============================
SABOTAGE (redemption):
- anyone can sabotage
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

PLANT+WATER SEED (redemption):
- anyone can plant seed
- non-followers: return "you need to be a follower", reject/refund
- follower
- bot runs sabotage() -> auto completes redemption

WATER (command):
- non-follower: bot passes
- follower: bot sends info to water()

LOGIC in BACK:
- database
- { places:
    {'place: 1, {'username': 'timeenjoyed', 'state': 3, 'wilt': false}},
    {'place: 2, {'username': 'ambivalentbunnie', 'state': 2, 'wilt': true }},
    {'place: 3, {'username': 'mystypy', 'state': 2, 'wilt': true}},
    {'place: 4, {'username': 'kroden', 'state': 2, 'wilt': true }},
    }

<script>

cont event = new EventSource("") = > json data

def event

</script>

<html>
<div id=1, style="bottom: 25px'>
    <src img="seed.jpg">
</div>
</html>




time: int =

async def get_step(username):
    - "check to see if username exists"

    def check_wilt(time)
    - "check to see if wilt"
    - get time
    - generate the state
    return state

async def dispatch










LOGIC in FRONT = > channel
- time => front
- wilt => front
- cylce =>